import random


class Mastermind:
    def __init__(self):
        self.digRange = 4
        self.noRange = 6
        self.counter = 1
        self.passcode = []
        self.guess_list = []

    def player_decide(self):
        while True:
            try:
                self.digRange = int(input('How many BLANKS do you want to challenge? '))
                break
            except ValueError:
                print('Error! NUMBER only!')

        while True:
            try:
                self.noRange = int(input('What is the number range you want to challenge, from 1 to: '))
                break
            except ValueError:
                print('Error! NUMBER only!')


    def create_passcode(self):
        self.passcode = [random.randint(1, self.noRange) for a in range(self.digRange)]
        # convert integer to list of string
        for b in range(len(self.passcode)):
            self.passcode[b] = str(self.passcode[b])
        return self.passcode


    def player_guess(self):
        done = False
        while not done:
            guess = input(f"Attempt {self.counter}: Guess {self.digRange} numbers ranging from 1 to {self.noRange}:\n>> ")
            if guess.isnumeric() == False:
                print('Opp! NUMBER only!!')
            elif len(guess) != self.digRange:
                print(f'Must input {self.digRange} numbers!')
            else:
                for i in range(len(guess)):
                    if guess[i] == '0' or int(guess[i]) > self.noRange:
                        print(f'Error! NUMBER must between 1 to {self.noRange}')
                        self.guess_list.clear() # always refresh guess_list for feedback() later
                        done = False    # ensure stay in while loop after break
                        break   # out from the for loop
                    else:
                        self.guess_list.append(guess[i])
                        done = True
        return self.guess_list


    def feedback(self):
        correct_position = 0
        wrong_position = 0
        if self.guess_list == self.passcode:
            winning = True
        else:
            # duplicate passcode
            guess_list2 = self.guess_list.copy()
            passcode2 = self.passcode.copy()
            for m in range(len(guess_list2)):
                if guess_list2[m] == passcode2[m]:
                    correct_position += 1
                    # once correct number is matched, to eliminate recurrence
                    guess_list2[m] = 'na'
                    passcode2[m] = 'nb'
            for n in range(len(guess_list2)):
                if guess_list2[n] in passcode2:
                    wrong_position += 1
                    passcode2.remove(guess_list2[n])
            print('You guess:', self.guess_list, '\tFeedback:', correct_position * '‚úî', wrong_position * '‚ùì',
                  '\n(‚úî - correct number & position; ‚ùì - correct number but wrong position)')
            self.guess_list.clear() # to clear the value of initial variable
            winning = False
        return winning


def main():
    # Intro
    game = Mastermind()
    print('MASTERMIND game mode default setting:  (4) digits & (6) numbers range.')
    # Player to decide game mode
    while True:
        decide = input('(P)lay or (C)hange? ').lower()
        if decide == 'p':
            game.digRange, game.noRange = 4, 6
            break
        elif decide == 'c':
            game.player_decide()
            break
        else:
            print('Error!')
    # print(game.digRange, game.noRange)
    # Create random passcode
    game.create_passcode()
    # print(game.create_passcode())
    # Player provide guess list
    game.player_guess()
    # MASTERMIND gives clue
    while not game.feedback():
        game.counter += 1
        game.player_guess()
    else:
        print(f'Congrats, MASTERMIND code is {game.passcode}. You have tried {game.counter} times and WON!!!')
    # Continue playing?
    next_game = input('Continue playing?(Y/N) ').lower()
    if next_game == 'y':
        main()
    elif next_game == 'n':
        print('Bye! Bye!')
    else:
        print('You LooooSER... Game terminated! üëé')


main()
